// <auto-generated />
using System;
using Bibliotek.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bibliotek.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bibliotek.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorLastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Bibliotek.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ISBN")
                        .HasColumnType("bigint");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingId")
                        .HasColumnType("int");

                    b.Property<int?>("ReleaseDateId")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("RatingId");

                    b.HasIndex("ReleaseDateId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Bibliotek.Models.Book_Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("Book_Authors");
                });

            modelBuilder.Entity("Bibliotek.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LibraryCardId")
                        .HasColumnType("int");

                    b.Property<int?>("LibraryId")
                        .HasColumnType("int");

                    b.Property<int?>("RentalId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("LibraryCardId");

                    b.HasIndex("RentalId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Bibliotek.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("LibraryId")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Bibliotek.Models.Library", b =>
                {
                    b.Property<int>("LibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("RentalID")
                        .HasColumnType("int");

                    b.HasKey("LibraryId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("Bibliotek.Models.LibraryCard", b =>
                {
                    b.Property<int>("LibraryCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.HasKey("LibraryCardId");

                    b.ToTable("LibraryCards");
                });

            modelBuilder.Entity("Bibliotek.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ratings")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Bibliotek.Models.ReleaseDate", b =>
                {
                    b.Property<int>("ReleaseDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Release")
                        .HasColumnType("int");

                    b.HasKey("ReleaseDateId");

                    b.ToTable("ReleaseDates");
                });

            modelBuilder.Entity("Bibliotek.Models.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("LibraryId")
                        .HasColumnType("int");

                    b.Property<int>("RentalDate")
                        .HasColumnType("int");

                    b.Property<bool?>("Rented")
                        .HasColumnType("bit");

                    b.Property<int?>("ReturnDate")
                        .HasColumnType("int");

                    b.HasKey("RentalId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("Bibliotek.Models.Book", b =>
                {
                    b.HasOne("Bibliotek.Models.Inventory", "Inventory")
                        .WithMany("Books")
                        .HasForeignKey("InventoryId");

                    b.HasOne("Bibliotek.Models.Rating", "Rating")
                        .WithMany("Books")
                        .HasForeignKey("RatingId");

                    b.HasOne("Bibliotek.Models.ReleaseDate", "ReleaseDate")
                        .WithMany("Books")
                        .HasForeignKey("ReleaseDateId");
                });

            modelBuilder.Entity("Bibliotek.Models.Book_Author", b =>
                {
                    b.HasOne("Bibliotek.Models.Author", "Author")
                        .WithMany("Book_Authors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bibliotek.Models.Book", "Book")
                        .WithMany("Book_Authors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bibliotek.Models.Customer", b =>
                {
                    b.HasOne("Bibliotek.Models.LibraryCard", "LibraryCard")
                        .WithMany("Customers")
                        .HasForeignKey("LibraryCardId");

                    b.HasOne("Bibliotek.Models.Rental", "Rental")
                        .WithMany("Customers")
                        .HasForeignKey("RentalId");
                });

            modelBuilder.Entity("Bibliotek.Models.Inventory", b =>
                {
                    b.HasOne("Bibliotek.Models.Library", "Library")
                        .WithMany("Inventories")
                        .HasForeignKey("LibraryId");
                });

            modelBuilder.Entity("Bibliotek.Models.Rental", b =>
                {
                    b.HasOne("Bibliotek.Models.Library", "Library")
                        .WithMany("Rentals")
                        .HasForeignKey("LibraryId");
                });
#pragma warning restore 612, 618
        }
    }
}
